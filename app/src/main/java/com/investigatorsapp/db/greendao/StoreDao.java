package com.investigatorsapp.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.investigatorsapp.db.greendao.Store;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STORE.
*/
public class StoreDao extends AbstractDao<Store, String> {

    public static final String TABLENAME = "STORE";

    /**
     * Properties of entity Store.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Salerno = new Property(0, String.class, "salerno", true, "SALERNO");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Jobid = new Property(2, String.class, "jobid", false, "JOBID");
        public final static Property Token = new Property(3, String.class, "token", false, "TOKEN");
        public final static Property Polygonid = new Property(4, String.class, "polygonid", false, "POLYGONID");
        public final static Property Polygonname = new Property(5, String.class, "polygonname", false, "POLYGONNAME");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Status = new Property(7, String.class, "status", false, "STATUS");
        public final static Property Custname = new Property(8, String.class, "custname", false, "CUSTNAME");
        public final static Property Custperson = new Property(9, String.class, "custperson", false, "CUSTPERSON");
        public final static Property Fphone = new Property(10, String.class, "fphone", false, "FPHONE");
        public final static Property Telephone = new Property(11, String.class, "telephone", false, "TELEPHONE");
        public final static Property Email = new Property(12, String.class, "email", false, "EMAIL");
        public final static Property Fax = new Property(13, String.class, "fax", false, "FAX");
        public final static Property Country = new Property(14, String.class, "country", false, "COUNTRY");
        public final static Property Province = new Property(15, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(16, String.class, "city", false, "CITY");
        public final static Property District = new Property(17, String.class, "district", false, "DISTRICT");
        public final static Property Address = new Property(18, String.class, "address", false, "ADDRESS");
        public final static Property Zipcode = new Property(19, String.class, "zipcode", false, "ZIPCODE");
        public final static Property Custtype = new Property(20, String.class, "custtype", false, "CUSTTYPE");
        public final static Property Producttype = new Property(21, String.class, "producttype", false, "PRODUCTTYPE");
        public final static Property Channeltype = new Property(22, String.class, "channeltype", false, "CHANNELTYPE");
        public final static Property Stationnum = new Property(23, String.class, "stationnum", false, "STATIONNUM");
        public final static Property Workernum = new Property(24, String.class, "workernum", false, "WORKERNUM");
        public final static Property Lat1 = new Property(25, String.class, "lat1", false, "LAT1");
        public final static Property Lng1 = new Property(26, String.class, "lng1", false, "LNG1");
        public final static Property Lat2 = new Property(27, String.class, "lat2", false, "LAT2");
        public final static Property Lng2 = new Property(28, String.class, "lng2", false, "LNG2");
        public final static Property Photoname = new Property(29, String.class, "photoname", false, "PHOTONAME");
        public final static Property Isshell = new Property(30, String.class, "isshell", false, "ISSHELL");
        public final static Property Iscastrol = new Property(31, String.class, "iscastrol", false, "ISCASTROL");
        public final static Property Ismobil = new Property(32, String.class, "ismobil", false, "ISMOBIL");
        public final static Property Monthoil = new Property(33, String.class, "monthoil", false, "MONTHOIL");
        public final static Property Audioname = new Property(34, String.class, "audioname", false, "AUDIONAME");
    };


    public StoreDao(DaoConfig config) {
        super(config);
    }
    
    public StoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STORE' (" + //
                "'SALERNO' TEXT PRIMARY KEY NOT NULL ," + // 0: salerno
                "'USERID' TEXT," + // 1: userid
                "'JOBID' TEXT," + // 2: jobid
                "'TOKEN' TEXT," + // 3: token
                "'POLYGONID' TEXT," + // 4: polygonid
                "'POLYGONNAME' TEXT," + // 5: polygonname
                "'TIME' TEXT," + // 6: time
                "'STATUS' TEXT," + // 7: status
                "'CUSTNAME' TEXT," + // 8: custname
                "'CUSTPERSON' TEXT," + // 9: custperson
                "'FPHONE' TEXT," + // 10: fphone
                "'TELEPHONE' TEXT," + // 11: telephone
                "'EMAIL' TEXT," + // 12: email
                "'FAX' TEXT," + // 13: fax
                "'COUNTRY' TEXT," + // 14: country
                "'PROVINCE' TEXT," + // 15: province
                "'CITY' TEXT," + // 16: city
                "'DISTRICT' TEXT," + // 17: district
                "'ADDRESS' TEXT," + // 18: address
                "'ZIPCODE' TEXT," + // 19: zipcode
                "'CUSTTYPE' TEXT," + // 20: custtype
                "'PRODUCTTYPE' TEXT," + // 21: producttype
                "'CHANNELTYPE' TEXT," + // 22: channeltype
                "'STATIONNUM' TEXT," + // 23: stationnum
                "'WORKERNUM' TEXT," + // 24: workernum
                "'LAT1' TEXT," + // 25: lat1
                "'LNG1' TEXT," + // 26: lng1
                "'LAT2' TEXT," + // 27: lat2
                "'LNG2' TEXT," + // 28: lng2
                "'PHOTONAME' TEXT," + // 29: photoname
                "'ISSHELL' TEXT," + // 30: isshell
                "'ISCASTROL' TEXT," + // 31: iscastrol
                "'ISMOBIL' TEXT," + // 32: ismobil
                "'MONTHOIL' TEXT," + // 33: monthoil
                "'AUDIONAME' TEXT);"); // 34: audioname
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STORE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Store entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSalerno());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String jobid = entity.getJobid();
        if (jobid != null) {
            stmt.bindString(3, jobid);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
 
        String polygonid = entity.getPolygonid();
        if (polygonid != null) {
            stmt.bindString(5, polygonid);
        }
 
        String polygonname = entity.getPolygonname();
        if (polygonname != null) {
            stmt.bindString(6, polygonname);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, status);
        }
 
        String custname = entity.getCustname();
        if (custname != null) {
            stmt.bindString(9, custname);
        }
 
        String custperson = entity.getCustperson();
        if (custperson != null) {
            stmt.bindString(10, custperson);
        }
 
        String fphone = entity.getFphone();
        if (fphone != null) {
            stmt.bindString(11, fphone);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(12, telephone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(14, fax);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(15, country);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(16, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(17, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(18, district);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(19, address);
        }
 
        String zipcode = entity.getZipcode();
        if (zipcode != null) {
            stmt.bindString(20, zipcode);
        }
 
        String custtype = entity.getCusttype();
        if (custtype != null) {
            stmt.bindString(21, custtype);
        }
 
        String producttype = entity.getProducttype();
        if (producttype != null) {
            stmt.bindString(22, producttype);
        }
 
        String channeltype = entity.getChanneltype();
        if (channeltype != null) {
            stmt.bindString(23, channeltype);
        }
 
        String stationnum = entity.getStationnum();
        if (stationnum != null) {
            stmt.bindString(24, stationnum);
        }
 
        String workernum = entity.getWorkernum();
        if (workernum != null) {
            stmt.bindString(25, workernum);
        }
 
        String lat1 = entity.getLat1();
        if (lat1 != null) {
            stmt.bindString(26, lat1);
        }
 
        String lng1 = entity.getLng1();
        if (lng1 != null) {
            stmt.bindString(27, lng1);
        }
 
        String lat2 = entity.getLat2();
        if (lat2 != null) {
            stmt.bindString(28, lat2);
        }
 
        String lng2 = entity.getLng2();
        if (lng2 != null) {
            stmt.bindString(29, lng2);
        }
 
        String photoname = entity.getPhotoname();
        if (photoname != null) {
            stmt.bindString(30, photoname);
        }
 
        String isshell = entity.getIsshell();
        if (isshell != null) {
            stmt.bindString(31, isshell);
        }
 
        String iscastrol = entity.getIscastrol();
        if (iscastrol != null) {
            stmt.bindString(32, iscastrol);
        }
 
        String ismobil = entity.getIsmobil();
        if (ismobil != null) {
            stmt.bindString(33, ismobil);
        }
 
        String monthoil = entity.getMonthoil();
        if (monthoil != null) {
            stmt.bindString(34, monthoil);
        }
 
        String audioname = entity.getAudioname();
        if (audioname != null) {
            stmt.bindString(35, audioname);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Store readEntity(Cursor cursor, int offset) {
        Store entity = new Store( //
            cursor.getString(offset + 0), // salerno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // jobid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // token
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // polygonid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // polygonname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // custname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // custperson
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fphone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // telephone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // email
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fax
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // country
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // province
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // city
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // district
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // address
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // zipcode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // custtype
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // producttype
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // channeltype
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // stationnum
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // workernum
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // lat1
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // lng1
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // lat2
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // lng2
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // photoname
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // isshell
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // iscastrol
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // ismobil
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // monthoil
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34) // audioname
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Store entity, int offset) {
        entity.setSalerno(cursor.getString(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJobid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPolygonid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPolygonname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCustname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCustperson(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFphone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTelephone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFax(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCountry(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProvince(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCity(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDistrict(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAddress(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setZipcode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCusttype(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setProducttype(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setChanneltype(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setStationnum(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setWorkernum(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLat1(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLng1(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setLat2(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLng2(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPhotoname(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setIsshell(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setIscastrol(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setIsmobil(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setMonthoil(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setAudioname(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Store entity, long rowId) {
        return entity.getSalerno();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Store entity) {
        if(entity != null) {
            return entity.getSalerno();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
